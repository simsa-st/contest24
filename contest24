#!/bin/bash
# Author: Stepan Simsa

### Description ###
# This script contains some of the recurring actions you do when using the
# Contest24 library (https://github.com/simsa-st/contest24). It enables you to
# create new projects from templates, set the default flags for your
# client/server etc.
#
# Before using this script, change the LIBRARY_DIR and CONFIG_DIR variables
# below. Also change the TIMEOUT_COMMAND variable if you want to limit the
# memory usage of your client/server.
#
# The usual workflow is as follows:
# Create a new project from template my_template:
# $ c24 project new my_project new_folder my_template
# This copies the files from the template in new_folder and also the most
# recent version of c24 library (if its older/different copy is not already
# present in the template). It also renames the folder "project_name" in to the
# template to the project_name you specified (my_project) and substitues
# __PROJECT_NAME__ in all the files for the project_name.
# Now we will check the current configuration:
# $ c24 config show
# This will print some variables and their respective values. If we decide to
# change some, we run:
# $ c24 config set CLIENT_DEFAULT_FLAGS --stderrthreshold=1 --vis
# After we compile the client we can run and optionally specify additional
# flags:
# $ c24 client --port=5500


### Settings ###
# Change this to the path where is the downloaded repository
# https://github.com/simsa-st/contest24.
LIBRARY_DIR="/home/gorli/projects/contest24"
# Change this to a directory where this script can store its configuration
# files.
CONFIG_DIR="/home/gorli/.contest24"
mkdir -p $CONFIG_DIR

# If you want to limit memory usage of your client/server, set this variable to
# the timeout script that you can download here
# https://github.com/pshved/timeout.
TIMEOUT_COMMAND="time-out"

# Filename/file where is stored the name of the current project.
current_project_filename="current_project"
current_project_file=$CONFIG_DIR"/"$current_project_filename
# Directory that contains the templates.
templates_directory=$LIBRARY_DIR"/templates"
# Filename/file where is stored the default configuration for new projects
default_config_filename="default_config"
default_config_file=$CONFIG_DIR"/"$default_config_filename
# Variables that can be set in the config file.
config_variables="PROJECT_DIRECTORY CLIENT_BINARY CLIENT_DEFAULT_FLAGS
                  SERVER_BINARY SERVER_DEFAULT_FLAGS CLIENT_MEMORY_LIMIT
                  SERVER_MEMORY_LIMIT"

### Usage ###
usage="$0 project new project_name project_directory [template]
$0 project change project_name
$0 project show
$0 project forget project_name
$0 config show
$0 config set variable_name value
$0 client [...additional_flags]
$0 server from_port [to_port] [...additional_flags]
"'
project new:    Create new project with name "project_name" in the specified
                directory. This directory needs to be empty if it exists. If
                the template is specified it is copied to this directory. If
                the template does not contain a copy of the library, the most
                recent version is copied here. For more details on templates,
                see the documentation of Contest24 project.
project change: Change the current project to "project_name".
project show:   Show all projects. The current one is preceeded with *.
project forget: Forget the specified project. Does not delete the project
                files, it just forgets about the project existance and its
                configuration.
config show:    Show the current config variables.
config set:     Change the value of some config variable. Variable name is case
                sensitive.
client:         Run the client (path to the binary is in the CLIENT_BINARY
                config variable) with the default flags as specified in the
                CLIENT_DEFAULT_FLAGS config variable and with additional flags
                from the command line.
server:         Run the server (path to the binary is in the SERVER_BINARY
                config variable) and listen for players on ports from_port,
                from_port+1, ..., to_port. Default value of "to_port" is
                "from_port". Run the server with default flags that are
                specified in the SERVER_DEFAULT_FLAGS config variable and with
                additional flags from the command line.'

### Functions ###
show_usage_and_exit() {
  echo "$usage"
  exit 0
}
store_current_configuration() {
  > "$1"
  for var in $config_variables ; do
    eval val=\$$var
    echo "$var \"$val\"" >> "$1"
  done
}
load_current_configuration() {
  while read var val ; do
    eval $var="$val"
  done < $1
}
change_current_project() {
  PROJECT_NAME=$1
  echo $PROJECT_NAME > $current_project_file
}
cmd_config_show() {
  cat $current_config_file
}
change_variable() {
  if [[ $# -lt 1 ]] ; then
    error_wrong_number_of_arguments
  fi
  variable=$1
  shift
  value='"$@"'
  eval $variable="$value"
  store_current_configuration $current_config_file
}
cmd_config() {
  if [[ $# -eq 0 ]] ; then
    error_wrong_number_of_arguments
  fi
  if [ "$1" = "set" ] ; then
    shift
    val=$1
    shift
    change_variable $val "$@"
  elif [ "$1" = "show" ] ; then
    cmd_config_show
  else
    error_unknown_command
  fi
}
cmd_run_client() {
  remaining_flags=$@
  cmd="$CLIENT_BINARY $CLIENT_DEFAULT_FLAGS $remaining_flags"
  if [[ $CLIENT_MEMORY_LIMIT -gt 0 ]] ; then
    cmd="$TIMEOUT_COMMAND -m $CLIENT_MEMORY_LIMIT $cmd"
  fi
  echo $cmd
  eval $cmd
}
cmd_run_server() {
  start_port=$1
  shift
  end_port=$start_port
  if [ $# -ge 1 ] ; then
    end_port=$1
    shift
  fi
  remaining_flags=$@
  ports=$start_port
  for p in `seq $(($start_port + 1)) $end_port` ; do
    ports="$ports,$p"
  done
  cmd="$SERVER_BINARY --ports=$ports $SERVER_DEFAULT_FLAGS $remaining_flags"
  if [[ $SERVER_MEMORY_LIMIT -gt 0 ]] ; then
    cmd="$TIMEOUT_COMMAND -m $SERVER_MEMORY_LIMIT $cmd"
  fi
  echo $cmd
  eval $cmd
}

create_default_config_file() {
  touch $default_config_file
  echo "CLIENT_MEMORY_LIMIT \"-1\"" >> $default_config_file
  echo "CLIENT_DEFAULT_FLAGS \"--logbuflevel=-1 --stderrthreshold=0 --vis --toolbar\"" >> $default_config_file
  echo "SERVER_MEMORY_LIMIT \"-1\"" >> $default_config_file
  echo "SERVER_DEFAULT_FLAGS \"--logbuflevel=-1 --vis\"" >> $default_config_file
}

error_wrong_number_of_arguments() {
  echo "error: wrong number of arguments"
  show_usage_and_exit
}
error_unknown_command() {
  echo "error: unkown command"
  show_usage_and_exit
}
error_no_current_project() {
  echo "error: no current project"
  echo "create new project or set current project with:"
  echo "contest24 project new/change project_name"
  exit 0
}
error_no_config_file() {
  echo "error: config file of current project ($PROJECT_NAME) not found"
  exit 0
}
error_project_already_exists() {
  echo "error: project $PROJECT_NAME already exists. Use project change instead of project new"
  exit 0
}
error_project_directory_not_empty() {
  echo "error: cannot create project $PROJECT_NAME in directory $PROJECT_DIRECTORY because it is not empty"
  exit 0
}
error_no_such_template() {
  echo "error: could not find template $1 in the templates directory $templates_directory/"
  exit 0
}
error_project_doesnt_exist() {
  echo "error: project $1 doesnt exist. Use project new to create it"
  exit 0
}

get_list_of_projects() {
  list_of_projects=""
  for file in `ls $CONFIG_DIR` ; do
    if [[ ! $file = $current_project_filename && ! $file = $default_config_filename ]] ; then
      if [[ ! -z $list_of_projects ]] ; then
        list_of_projects="$list_of_projects "
      fi
      list_of_projects=$list_of_projects$file
    fi
  done
}
project_exists() {
  get_list_of_projects
  [[ $list_of_projects == *"$1"* ]]
  return $?
}
get_list_of_templates() {
  list_of_templates=""
  templates_folders=`ls -d $templates_directory/*/`
  for dir in $templates_folders ; do
    if [[ ! -z $list_of_templates ]] ; then
      list_of_templates="$list_of_templates "
    fi
    b_dir=`basename $dir`
    list_of_templates=$list_of_templates$b_dir
  done
}
template_exists() {
  get_list_of_templates
  [[ $list_of_templates == *"$1"* ]]
  return $?
}

cmd_project_new() {
  if [[ $# -ne 2 && $# -ne 3 ]] ; then
    error_wrong_number_of_arguments
  fi
  get_list_of_projects
  PROJECT_NAME=$1
  PROJECT_DIRECTORY=`realpath $2`
  template=$3
  if (project_exists $PROJECT_NAME) ; then
    error_project_already_exists
  fi
  if [[ (-d $PROJECT_DIRECTORY) && (! -z "`ls -A $PROJECT_DIRECTORY`") ]] ; then
    error_project_directory_not_empty
  fi
  if ([[ -n $template ]] && (! template_exists $template)) ; then
    error_no_such_template $template
  fi
  change_current_project $PROJECT_NAME
  load_current_configuration $default_config_file
  current_config_file=$CONFIG_DIR/$PROJECT_NAME
  CLIENT_BINARY="$PROJECT_DIRECTORY/build/bin/$PROJECT_NAME"
  SERVER_BINARY="$PROJECT_DIRECTORY/build/bin/$PROJECT_NAME""_server"
  log_dir="$PROJECT_DIRECTORY/tmp"
  change_variable CLIENT_DEFAULT_FLAGS "$CLIENT_DEFAULT_FLAGS --log_dir=$log_dir"
  store_current_configuration $current_config_file

  if [[ -n $template ]] ; then
    cp -r $templates_directory/$template $PROJECT_DIRECTORY
  fi
  mkdir -p "$PROJECT_DIRECTORY"
  mkdir -p "$PROJECT_DIRECTORY/build"
  mkdir -p "$PROJECT_DIRECTORY/tmp"
  for file in `find $PROJECT_DIRECTORY` ; do
    if [[ (-d $file) && (`basename $file` = "project_name") ]] ; then
      mv -i -v $file `dirname $file`"/$PROJECT_NAME"
    fi
    if [[ -f $file ]] ; then
      sed -i.bak "s/__PROJECT_NAME__/$PROJECT_NAME/g" $file
      rm "$file.bak"
    fi
  done
  if [[ -d $PROJECT_DIRECTORY"/c24" ]] ; then
    echo "own version of library c24 found in the template"
    echo "to check the difference between the most updated version run: diff -r $LIBRARY_DIR/c24 $PROJECT_DIRECTORY/c24"
  else
    echo "copying current version of library c24 from: $LIBRARY_DIR/c24"
    cp -r $LIBRARY_DIR"/c24" $PROJECT_DIRECTORY
  fi
}
cmd_project_change() {
    if [[ $# -ne 1 ]] ; then
      error_wrong_number_of_arguments
    fi
    PROJECT_NAME=$1
    if (! project_exists $PROJECT_NAME) ; then
      error_project_doesnt_exist $PROJECT_NAME
    fi
    change_current_project $PROJECT_NAME
}
cmd_project_show() {
  for file in `ls $CONFIG_DIR` ; do
    if [[ $file = $current_project_filename || $file = $default_config_filename ]] ; then
      continue
    fi
    if [[ $file = $PROJECT_NAME ]] ; then
      echo "* "$file
    else
      echo "  "$file
    fi
  done
}
cmd_project_forget() {
  if [[ $# -ne 1 ]] ; then
    error_wrong_number_of_arguments
  fi
  forget_project_name=$1
  if (! project_exists $forget_project_name) ; then
    error_project_doesnt_exist $forget_project_name
  fi
  if [[ $PROJECT_NAME == $forget_project_name ]] ; then
    rm "$current_project_file"
  fi
  rm "$CONFIG_DIR/$forget_project_name"
}
cmd_project() {
  if [[ $# -lt 1 ]] ; then
    error_wrong_number_of_arguments
  fi
  cmd=$1
  shift
  if [ $cmd == "new" ] ; then
    cmd_project_new $@
  elif [ $cmd == "change" ] ; then
    cmd_project_change $@
  elif [ $cmd == "show" ] ; then
    cmd_project_show
  elif [ $cmd == "forget" ] ; then
    cmd_project_forget $@
  else
    error_unknown_command
  fi
}

### Script ###
if [[ $# -eq 0 ]] ; then
  error_wrong_number_of_arguments
fi
if [[ $1 = "help" || $1 = "-help" || $1 = "--help" ]] ; then
  show_usage_and_exit
else
  primary_cmd=$1
  shift
fi

if [ ! -f $default_config_file ] ; then create_default_config_file ; fi

PROJECT_NAME=""
if [ -f $current_project_file ] ; then
  read PROJECT_NAME < $current_project_file
fi

if [ $primary_cmd == "project" ] ; then
  cmd_project $@
  exit 0
fi

if [[ -z $PROJECT_NAME ]] ; then
  error_no_current_project
fi

current_config_file=$CONFIG_DIR"/"$PROJECT_NAME
if [[ ! -f $current_config_file ]] ; then
  error_no_config_file
fi
load_current_configuration $current_config_file

if [ "$primary_cmd" = "client" ] ; then
  cmd_run_client $@
elif [ "$primary_cmd" = "server" ] ; then
  cmd_run_server $@
elif [ "$primary_cmd" = "config" ] ; then
  cmd_config $@
else
  error_unknown_command
fi
