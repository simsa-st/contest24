#!/bin/bash
# Author: Stepan Simsa

### Description ###
# This script contains some of the recurring actions you do when using the
# Contest24 library (https://github.com/simsa-st/contest24). It enables you to
# create new projects from templates, set the default flags for your
# client/server etc.
#
# You can change the TIMEOUT_COMMAND variable if you want to limit the memory
# usage of your client/server.
#
# The usual workflow is as follows:
# Create a new project from template my_template:
# $ c24 project new my_project directory_with_template new_project_directory
# This copies the files from the template in new_project_directory and also the
# most recent version of c24 library (if its older/different copy is not
# already present in the template). It also renames the folder "project_name"
# in to the template to the project_name you specified (my_project) and
# substitues __PROJECT_NAME__ in all the files for the project_name.
#
# Now we will check the current configuration:
# $ cd new_project_directory
# $ c24 config show
# This will print some variables and their respective values. If we decide to
# change some, we run:
# $ c24 config set CLIENT_DEFAULT_FLAGS --stderrthreshold=1 --vis
# After we compile the client we can run and optionally specify additional
# flags:
# $ c24 client --port=5500


# If you want to limit memory usage of your client/server, set this variable to
# the timeout script that you can download here
# https://github.com/pshved/timeout.
TIMEOUT_COMMAND="time-out"

project_dir=`pwd`
while [[ (! $project_dir == "/") && (! -d $project_dir/.contest24) ]] ; do
  project_dir=`dirname $project_dir`
done
if [[ $project_dir == "/" ]] ; then
  project_dir=""
fi

set_config_dir() {
  config_dir="$project_dir/.contest24"
  # Filename/file where is stored the configuration for the project
  config_filename="config"
  config_file=$config_dir"/"$config_filename
}
set_config_dir
# Variables that can be set in the config file.
config_variables="CLIENT_BINARY CLIENT_DEFAULT_FLAGS SERVER_BINARY
                  SERVER_DEFAULT_FLAGS CLIENT_MEMORY_LIMIT SERVER_MEMORY_LIMIT"

### Usage ###
usage="$0 project new project_name template_directory project_directory
$0 config show
$0 config set variable_name value
$0 client [...additional_flags]
$0 server from_port [to_port] [...additional_flags]
"'
project new:    Create new project with name "project_name" in the specified
                directory. This directory needs to be empty if it exists. The
                template is copied to this directory. If the template does not
                contain a copy of the library, the most recent version is
                copied here. For more details on templates, see the
                documentation of Contest24 project.
config show:    Show the current config variables.
config set:     Change the value of some config variable. Variable name is case
                sensitive.
client:         Run the client (path to the binary is in the CLIENT_BINARY
                config variable) with the default flags as specified in the
                CLIENT_DEFAULT_FLAGS config variable and with additional flags
                from the command line.
server:         Run the server (path to the binary is in the SERVER_BINARY
                config variable) and listen for players on ports from_port,
                from_port+1, ..., to_port. Default value of "to_port" is
                "from_port". Run the server with default flags that are
                specified in the SERVER_DEFAULT_FLAGS config variable and with
                additional flags from the command line.'

### Functions ###
show_usage_and_exit() {
  echo "$usage"
  exit 0
}
store_current_configuration() {
  > "$1"
  for var in $config_variables ; do
    eval val=\$$var
    echo "$var \"$val\"" >> "$1"
  done
}
load_current_configuration() {
  while read var val ; do
    eval $var="$val"
  done < $1
}
cmd_config_show() {
  cat $config_file
}
change_variable() {
  if [[ $# -lt 1 ]] ; then
    error_wrong_number_of_arguments
  fi
  variable=$1
  shift
  value='"$@"'
  eval $variable="$value"
  store_current_configuration $config_file
}
cmd_config() {
  if [[ $# -eq 0 ]] ; then
    error_wrong_number_of_arguments
  fi
  if [ "$1" = "set" ] ; then
    shift
    val=$1
    shift
    change_variable $val "$@"
  elif [ "$1" = "show" ] ; then
    cmd_config_show
  else
    error_unknown_command
  fi
}
cmd_run_client() {
  remaining_flags=$@
  cmd="$CLIENT_BINARY $CLIENT_DEFAULT_FLAGS $remaining_flags"
  if [[ $CLIENT_MEMORY_LIMIT -gt 0 ]] ; then
    cmd="$TIMEOUT_COMMAND -m $CLIENT_MEMORY_LIMIT $cmd"
  fi
  echo $cmd
  eval $cmd
}
cmd_run_server() {
  start_port=$1
  shift
  end_port=$start_port
  if [ $# -ge 1 ] ; then
    end_port=$1
    shift
  fi
  remaining_flags=$@
  ports=$start_port
  for p in `seq $(($start_port + 1)) $end_port` ; do
    ports="$ports,$p"
  done
  cmd="$SERVER_BINARY --ports=$ports $SERVER_DEFAULT_FLAGS $remaining_flags"
  if [[ $SERVER_MEMORY_LIMIT -gt 0 ]] ; then
    cmd="$TIMEOUT_COMMAND -m $SERVER_MEMORY_LIMIT $cmd"
  fi
  echo $cmd
  eval $cmd
}

create_default_config_file() {
  mkdir -p $config_dir
  touch $config_file
  echo "CLIENT_MEMORY_LIMIT \"-1\"" >> $config_file
  echo "CLIENT_DEFAULT_FLAGS \"--vis --toolbar\"" >> $config_file
  echo "SERVER_MEMORY_LIMIT \"-1\"" >> $config_file
  echo "SERVER_DEFAULT_FLAGS \"--vis\"" >> $config_file
}

error_wrong_number_of_arguments() {
  echo "error: wrong number of arguments"
  show_usage_and_exit
}
error_unknown_command() {
  echo "error: unkown command"
  show_usage_and_exit
}
error_no_current_project() {
  echo "error: no current project"
  exit 0
}
error_no_config_file() {
  echo "error: config file $config_file not found"
  exit 0
}
error_project_directory_not_empty() {
  echo "error: cannot create project $PROJECT_NAME in directory $PROJECT_DIRECTORY because it is not empty"
  exit 0
}
error_not_a_template() {
  echo "error: not a proper template directory $TEMPLATE_DIRECTORY"
  exit 0
}

cmd_project_new() {
  if [[ $# -ne 3 ]] ; then
    error_wrong_number_of_arguments
  fi
  PROJECT_NAME=$1
  TEMPLATE_DIRECTORY=`realpath $2`
  project_dir=`realpath $3`
  set_config_dir
  if [[ (-d $project_dir) && (! -z "`ls -A $project_dir`") ]] ; then
    error_project_directory_not_empty
  fi
  library_dir=$(dirname $(dirname $TEMPLATE_DIRECTORY))
  if [[ (! -d $TEMPLATE_DIRECTORY) || (! -d $library_dir/c24 ) ]] ; then
    error_not_a_template
  fi
  if [[ ! -f $config_file ]] ; then
    create_default_config_file
  fi
  load_current_configuration $config_file
  CLIENT_BINARY="$project_dir/build/bin/$PROJECT_NAME"
  SERVER_BINARY="$project_dir/build/bin/$PROJECT_NAME""_server"
  log_dir="$project_dir/tmp"
  # change_variable CLIENT_DEFAULT_FLAGS "$CLIENT_DEFAULT_FLAGS --log_dir=$log_dir"
  store_current_configuration $config_file

  if [[ ! -d $project_dir ]] ; then
    mkdir -p $project_dir
  fi
  cp -r "$TEMPLATE_DIRECTORY/." $project_dir/
  mkdir -p "$project_dir/build"
  mkdir -p "$project_dir/tmp"
  if [[ -d "$project_dir/project_name" ]] ; then
    mv -i -v "$project_dir/project_name" "$project_dir/$PROJECT_NAME"
  fi
  for file in `find $project_dir` ; do
    if [[ -f $file ]] ; then
      sed -i.bak "s/__PROJECT_NAME__/$PROJECT_NAME/g" $file
      rm "$file.bak"
    fi
  done
  if [[ -d $project_dir"/c24" ]] ; then
    echo "own version of library c24 found in the template"
    echo "to check the difference between the most updated version run: diff -r $library_dir/c24 $project_dir/c24"
  else
    echo "copying current version of library c24 from: $library_dir/c24"
    cp -r $library_dir"/c24" $project_dir
  fi
}
cmd_project() {
  if [[ $# -lt 1 ]] ; then
    error_wrong_number_of_arguments
  fi
  cmd=$1
  shift
  if [ $cmd == "new" ] ; then
    cmd_project_new $@
  else
    error_unknown_command
  fi
}

### Script ###
if [[ $# -eq 0 ]] ; then
  error_wrong_number_of_arguments
fi
if [[ $1 = "help" || $1 = "-h" || $1 = "-help" || $1 = "--help" ]] ; then
  show_usage_and_exit
else
  primary_cmd=$1
  shift
fi

if [ $primary_cmd == "project" ] ; then
  cmd_project $@
  exit 0
fi

if [[ -z $project_dir ]] ; then
  error_no_current_project
fi

load_current_configuration $config_file

if [ "$primary_cmd" = "client" ] ; then
  cmd_run_client $@
elif [ "$primary_cmd" = "server" ] ; then
  cmd_run_server $@
elif [ "$primary_cmd" = "config" ] ; then
  cmd_config $@
else
  error_unknown_command
fi
